package com.srini.hibpojogen;

import org.junit.Assert;
import org.junit.Test;


import com.srini.hibpojogen.protein_tracker.factories.proteinTracker.*;
import com.srini.hibpojogen.protein_tracker.model.obj.proteinTracker.*;
import com.srini.hibpojogen.protein_tracker.services.data.DataLayerProteinTracker;
import com.srini.hibpojogen.protein_tracker.services.data.DataLayerProteinTrackerImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateProteinTrackerDaoFactory.getUserGoalalertDao().getQuery("delete from UserGoalalert").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getUsersDao().getQuery("delete from Users").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getUserhistoryDao().getQuery("delete from Userhistory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getProteindataDao().getQuery("delete from Proteindata").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getGoalalertDao().getQuery("delete from Goalalert").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateProteinTrackerDaoFactory.getUserGoalalertDao().getQuery("delete from UserGoalalert").executeUpdate();
		HibernateProteinTrackerDaoFactory.getUsersDao().getQuery("delete from Users").executeUpdate();
		HibernateProteinTrackerDaoFactory.getUserhistoryDao().getQuery("delete from Userhistory").executeUpdate();
		HibernateProteinTrackerDaoFactory.getProteindataDao().getQuery("delete from Proteindata").executeUpdate();
		HibernateProteinTrackerDaoFactory.getGoalalertDao().getQuery("delete from Goalalert").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: protein_tracker.goalalert.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testGoalalert() throws CloneNotSupportedException {

	 	DataLayerProteinTracker dataLayerProteinTracker = DataLayerProteinTrackerImpl.getInstance();
		Goalalert goalalert = ProteinTrackerDataPoolFactory.getGoalalert();
		dataLayerProteinTracker.saveOrUpdate(goalalert);

		Integer goalalertId = goalalert.getId();
		Goalalert copy = goalalert.clone();
		dataLayerProteinTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerProteinTracker.evict(goalalert); 		 

		goalalert = dataLayerProteinTracker.getGoalalert(goalalertId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), goalalert.getId());
		Assert.assertEquals(copy.getMessage(), goalalert.getMessage());
		Assert.assertEquals(copy.getUserGoalalerts(), goalalert.getUserGoalalerts());
		// tests for coverage completeness
		Assert.assertFalse(goalalert.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(goalalert.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: protein_tracker.proteindata.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProteindata() throws CloneNotSupportedException {

	 	DataLayerProteinTracker dataLayerProteinTracker = DataLayerProteinTrackerImpl.getInstance();
		Proteindata proteindata = ProteinTrackerDataPoolFactory.getProteindata();
		dataLayerProteinTracker.saveOrUpdate(proteindata);

		Integer proteindataId = proteindata.getId();
		Proteindata copy = proteindata.clone();
		dataLayerProteinTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerProteinTracker.evict(proteindata); 		 

		proteindata = dataLayerProteinTracker.getProteindata(proteindataId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getGoal(), proteindata.getGoal());
		Assert.assertEquals(copy.getId(), proteindata.getId());
		Assert.assertEquals(copy.getTotal(), proteindata.getTotal());
		Assert.assertEquals(copy.getUserss(), proteindata.getUserss());
		// tests for coverage completeness
		Assert.assertFalse(proteindata.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(proteindata.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: protein_tracker.user_goalalert.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testUserGoalalert() throws CloneNotSupportedException {

	 	DataLayerProteinTracker dataLayerProteinTracker = DataLayerProteinTrackerImpl.getInstance();
		UserGoalalert userGoalalert = ProteinTrackerDataPoolFactory.getUserGoalalert();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.srini.hibpojogen.protein_tracker.factories.proteinTracker.HibernateProteinTrackerDaoFactory.getGoalalertDao().saveOrUpdate(((com.srini.hibpojogen.protein_tracker.model.obj.proteinTracker.UserGoalalertPK)userGoalalert.getId()).getGoalalert());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.srini.hibpojogen.protein_tracker.factories.proteinTracker.HibernateProteinTrackerDaoFactory.getUsersDao().saveOrUpdate(((com.srini.hibpojogen.protein_tracker.model.obj.proteinTracker.UserGoalalertPK)userGoalalert.getId()).getUser());
		dataLayerProteinTracker.saveOrUpdate(userGoalalert);

		UserGoalalertPK userGoalalertId = userGoalalert.getId();
		UserGoalalert copy = userGoalalert.clone();
		dataLayerProteinTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerProteinTracker.evict(userGoalalert); 		 

		userGoalalert = dataLayerProteinTracker.getUserGoalalert(userGoalalertId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), userGoalalert.getId());
		// tests for coverage completeness
		Assert.assertFalse(userGoalalert.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(userGoalalert.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: protein_tracker.userhistory.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testUserhistory() throws CloneNotSupportedException {

	 	DataLayerProteinTracker dataLayerProteinTracker = DataLayerProteinTrackerImpl.getInstance();
		Userhistory userhistory = ProteinTrackerDataPoolFactory.getUserhistory();
		dataLayerProteinTracker.saveOrUpdate(userhistory);

		Integer userhistoryId = userhistory.getId();
		Userhistory copy = userhistory.clone();
		dataLayerProteinTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerProteinTracker.evict(userhistory); 		 

		userhistory = dataLayerProteinTracker.getUserhistory(userhistoryId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getEntry(), userhistory.getEntry());
		Assert.assertEquals(copy.getEntrytime().getTime() / 1000, userhistory.getEntrytime().getTime() / 1000);
		Assert.assertEquals(copy.getId(), userhistory.getId());
		Assert.assertEquals(copy.getPosition(), userhistory.getPosition());
		// tests for coverage completeness
		Assert.assertFalse(userhistory.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(userhistory.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: protein_tracker.users.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testUsers() throws CloneNotSupportedException {

	 	DataLayerProteinTracker dataLayerProteinTracker = DataLayerProteinTrackerImpl.getInstance();
		Users users = ProteinTrackerDataPoolFactory.getUsers();
		dataLayerProteinTracker.saveOrUpdate(users);

		Integer usersId = users.getId();
		Users copy = users.clone();
		dataLayerProteinTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerProteinTracker.evict(users); 		 

		users = dataLayerProteinTracker.getUsers(usersId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), users.getName());
		// tests for coverage completeness
		Assert.assertFalse(users.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(users.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateProteinTrackerDaoFactory.getUserGoalalertDao().getQuery("delete from UserGoalalert").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getUsersDao().getQuery("delete from Users").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getUserhistoryDao().getQuery("delete from Userhistory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getProteindataDao().getQuery("delete from Proteindata").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateProteinTrackerDaoFactory.getGoalalertDao().getQuery("delete from Goalalert").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateProteinTrackerDaoFactory.getUserGoalalertDao().getQuery("delete from UserGoalalert").executeUpdate();
		HibernateProteinTrackerDaoFactory.getUsersDao().getQuery("delete from Users").executeUpdate();
		HibernateProteinTrackerDaoFactory.getUserhistoryDao().getQuery("delete from Userhistory").executeUpdate();
		HibernateProteinTrackerDaoFactory.getProteindataDao().getQuery("delete from Proteindata").executeUpdate();
		HibernateProteinTrackerDaoFactory.getGoalalertDao().getQuery("delete from Goalalert").executeUpdate();


		
	}

}

