package com.srini.hibpojogen.protein_tracker.factories.proteinTracker;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import com.srini.hibpojogen.protein_tracker.factories.proteinTracker.ProteinTrackerDataPoolFactory;
import com.srini.hibpojogen.protein_tracker.model.obj.proteinTracker.*;
import org.springframework.stereotype.Component;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;

/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class ProteinTrackerDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"UserGoalalert", "Users", "Userhistory", "Proteindata", "Goalalert"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("UserGoalalert", "Goalalert");
 		tableDeps.put("UserGoalalert", "Users");
	}

    /**
     * Data pool factory for Goalalert.
     * @return GoalalertA Goalalert object
     */
    public static Goalalert getGoalalert() {

        Goalalert goalalert = new Goalalert();    
        
        goalalert.setId(BasicDataGenerator.generateRandomInt());
        goalalert.setMessage(BasicDataGenerator.generateRandomString(255));

        return goalalert;
    }

    /**
     * Data pool factory for Proteindata.
     * @return ProteindataA Proteindata object
     */
    public static Proteindata getProteindata() {

        Proteindata proteindata = new Proteindata();    
        
        proteindata.setGoal(BasicDataGenerator.generateRandomInt());
        proteindata.setId(BasicDataGenerator.generateRandomInt());
        proteindata.setTotal(BasicDataGenerator.generateRandomInt());

        return proteindata;
    }

    /**
     * Data pool factory for Userhistory.
     * @return Userhistory A Userhistory object
     */
    public static Userhistory getUserhistory() {

        Userhistory userhistory =  getUserhistory(
	        null);

		return userhistory;
       
    }

     /**
     * Data pool factory for Userhistory.
     * @param user A valid Users object
     * @return Userhistory A Userhistory object
     */
    public static Userhistory getUserhistory(Users user) {
        Userhistory userhistory = new Userhistory();     
        userhistory.setEntry(BasicDataGenerator.generateRandomString(255));
        userhistory.setEntrytime(BasicDataGenerator.generateDate());
        userhistory.setId(BasicDataGenerator.generateRandomInt());
        userhistory.setPosition(BasicDataGenerator.generateRandomInt());
		if (user != null) {
			user.addUserhistory (userhistory);
		}

        return userhistory;
    }

    /**
     * Data pool factory for Users.
     * @return Users A Users object
     */
    public static Users getUsers() {

        Users users =  getUsers(
	        null);

		return users;
       
    }

     /**
     * Data pool factory for Users.
     * @param proteinData A valid Proteindata object
     * @return Users A Users object
     */
    public static Users getUsers(Proteindata proteinData) {
        Users users = new Users();     
        users.setName(BasicDataGenerator.generateRandomString(255));
		if (proteinData != null) {
			proteinData.addUsers (users);
		}

        return users;
    }

    /**
     * Data pool factory for UserGoalalert.
     * @return UserGoalalertA UserGoalalert object
     */
    public static UserGoalalert getUserGoalalert() {

        UserGoalalert userGoalalert = new UserGoalalert();    
        
        userGoalalert.setId(getUserGoalalertPK());

        return userGoalalert;
    }

    /**
     * Data pool factory for UserGoalalertPK.
     * @return UserGoalalertPK A UserGoalalertPK object
     */
    public static UserGoalalertPK getUserGoalalertPK() {

        UserGoalalertPK userGoalalertPK =  getUserGoalalertPK(
	        getGoalalert(), getUsers());

		return userGoalalertPK;
       
    }

     /**
     * Data pool factory for UserGoalalertPK.
     * @param goalalert A valid Goalalert object
     * @param user A valid Users object
     * @return UserGoalalertPK A UserGoalalertPK object
     */
    public static UserGoalalertPK getUserGoalalertPK(Goalalert goalalert, Users user) {
        UserGoalalertPK userGoalalertPK = new UserGoalalertPK();     
        userGoalalertPK.setGoalalert(goalalert);
        userGoalalertPK.setUser(user);

        return userGoalalertPK;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}