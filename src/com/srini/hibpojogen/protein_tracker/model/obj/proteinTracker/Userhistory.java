package com.srini.hibpojogen.protein_tracker.model.obj.proteinTracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.srini.hibpojogen.protein_tracker.model.obj.proteinTracker.iface.IUserhistory;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: userhistory.
 * @author autogenerated
 */

@Entity
@Table(name = "userhistory", catalog = "protein_tracker")
public class Userhistory implements Cloneable, Serializable, IPojoGenEntity, IUserhistory {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558912248L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String entry;
	/** Field mapping. */
	private Date entrytime;
	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private Integer position;
	/** Field mapping. */
	private Users user;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Userhistory() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Userhistory(Integer id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Userhistory.class;
	}
 

    /**
     * Return the value associated with the column: entry.
	 * @return A String object (this.entry)
	 */
	@Basic( optional = true )
	@Column( length = 255  )
	public String getEntry() {
		return this.entry;
		
	}
	

  
    /**  
     * Set the value related to the column: entry.
	 * @param entry the entry value you wish to set
	 */
	public void setEntry(final String entry) {
		this.entry = entry;
	}

    /**
     * Return the value associated with the column: entrytime.
	 * @return A Date object (this.entrytime)
	 */
	public Date getEntrytime() {
		return this.entrytime;
		
	}
	

  
    /**  
     * Set the value related to the column: entrytime.
	 * @param entrytime the entrytime value you wish to set
	 */
	public void setEntrytime(final Date entrytime) {
		this.entrytime = entrytime;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: position.
	 * @return A Integer object (this.position)
	 */
	public Integer getPosition() {
		return this.position;
		
	}
	

  
    /**  
     * Set the value related to the column: position.
	 * @param position the position value you wish to set
	 */
	public void setPosition(final Integer position) {
		this.position = position;
	}

    /**
     * Return the value associated with the column: user.
	 * @return A Users object (this.user)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "USER_ID", nullable = true )
	public Users getUser() {
		return this.user;
		
	}
	

  
    /**  
     * Set the value related to the column: user.
	 * @param user the user value you wish to set
	 */
	public void setUser(final Users user) {
		this.user = user;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Userhistory clone() throws CloneNotSupportedException {
		
        final Userhistory copy = (Userhistory)super.clone();

		copy.setEntry(this.getEntry());
		copy.setEntrytime(this.getEntrytime());
		copy.setId(this.getId());
		copy.setPosition(this.getPosition());
		copy.setUser(this.getUser());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("entry: " + this.getEntry() + ", ");
		sb.append("entrytime: " + this.getEntrytime() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("position: " + this.getPosition() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Userhistory that; 
		try {
			that = (Userhistory) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getEntry() == null) && (that.getEntry() == null)) || (getEntry() != null && getEntry().equals(that.getEntry())));
		result = result && (((getEntrytime() == null) && (that.getEntrytime() == null)) || (getEntrytime() != null && getEntrytime().equals(that.getEntrytime())));
		result = result && (((getPosition() == null) && (that.getPosition() == null)) || (getPosition() != null && getPosition().equals(that.getPosition())));
		result = result && (((getUser() == null) && (that.getUser() == null)) || (getUser() != null && getUser().getId().equals(that.getUser().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
